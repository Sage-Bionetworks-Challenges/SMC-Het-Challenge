SMCScoring.py

ccm - co clustering matrix
tout - truth verification out
pout - prediction verification out

scoreChallenge
	1 - verify scoring vcf
		- input - scoring vcf
		- get all usable lines from vcf (non-blank && non-comment)
		- count number of trues
		- get indices of trues in vcf
		- return - [ [ #linesInVCF ], [ #trueLinesInVCF ], [ list(mask) ] ]
	2 - verify truth file
		- input - truth file, #trueLinesInVCF
		- makes sure
			- len(truthfile) == len(mask)
			- set(truthfile) != seq(1, len(set(truthfile)), 1)
		- makes (c_m) n x m matrix, n = len(truthfile), m = len(set(truthfile))
			- is matrix where there is a 1 for every m position in each row denoted by each integer in truthfile
		- return - (truth ccm) dot product of c_m * t(c_m)
	3 - add pseudo counts to truth ccm
		- extend truth ccm from (n x n) to (m x m), where m = (n + sqrt(n))
		- the extension portion is from an m x m identity matrix
		- return - extended truth ccm
	4 - verify prediction file
		- same as verifying truth file ish
		- input - pred file, #linesInVCF
		- makes sure
			- len(predfile) == len(VCF)
			- set(predfile) != seq(1, len(set(predfile)), 1)
		- makes (c_m) n x m matrix, n = len(predfile), m = len(set(predfile))
			- is matrix where there is a 1 for every m position in each row denoted by each integer in predfile
		- return - (prediction ccm) dot product of c_m * t(c_m)
	5 - filter prediction matrices
		- foreach matrix in matrices(pout), filterFPs(matrix, mask)
		- filterFPs essentially just does..
			matrix[ np.ix_(mask, mask) ]
		- return - prediction ccm shrunk from n x n to m x m, where n = len(predfile), m = len(mask)
	6 - add pseudo counts to filtered prediction matrices
		- extend prediction ccm from (n x n) to (m x m), where m = (n + sqrt(n))
		- the extension portion is from an m x m identity matrix
		- return - extended prediction ccm
	7 - score function
		- 